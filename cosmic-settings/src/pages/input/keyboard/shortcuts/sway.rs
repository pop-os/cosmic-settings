use swayipc::Connection as SwayConnection;
use std::error::Error;
use cosmic_settings_config::shortcuts::{Action, Binding, Shortcuts};
use crate::pages::input::keyboard::shortcuts::{ShortcutMessage, Model};
use tracing::info;
use crate::sway::save_config;
use crate::execute_sway_cmd;

pub type SwayResult<T = ()> = Result<T, Box<dyn Error>>;

pub trait ShortcutMethods {
    /// Gets a mutable reference to the sway connection
    fn sway_connection(&mut self) -> Option<&mut SwayConnection>;
}

pub fn execute_sway_shortcut_commands(
    message: &ShortcutMessage, 
    model: &Model,
    page: &mut dyn ShortcutMethods
) -> SwayResult {
    // Check if we have a valid Sway connection
    if page.sway_connection().is_none() {
        // Not running under Sway or connection failed, silently skip
        return Ok(());
    }

    match message {
        ShortcutMessage::SubmitBinding(_) |
        ShortcutMessage::DeleteBinding(_) |
        ShortcutMessage::DeleteShortcut(_) |
        ShortcutMessage::ApplyReplace |
        ShortcutMessage::ResetBindings => {
            // When any of these operations complete, regenerate the entire shortcuts config
            update_sway_shortcuts(model, page)?;
        }
        
        // UI-only messages that don't affect actual bindings
        ShortcutMessage::AddAnotherKeybinding |
        ShortcutMessage::CancelReplace |
        ShortcutMessage::EditBinding(_, _) |
        ShortcutMessage::InputBinding(_, _) |
        ShortcutMessage::ShowShortcut(_, _) => {
            // These don't need Sway commands
        }
    }
    Ok(())
}

pub fn update_sway_shortcuts(
    model: &Model,
    page: &mut dyn ShortcutMethods
) -> SwayResult {
    // Check if we have a valid Sway connection
    let connection = match page.sway_connection() {
        Some(conn) => conn,
        None => {
            // Not running under Sway or connection failed, silently skip
            return Ok(());
        }
    };

    // Get the current shortcuts configuration
    let shortcuts_config = model.shortcuts_system_config();
    
    // Convert shortcuts to Sway bindsym commands
    let mut sway_bindings = Vec::new();
    
    for (binding, action) in &shortcuts_config.0 {
        // Skip super key bindings as they're handled elsewhere
        if binding.is_super() {
            continue;
        }
        
        if let Some(sway_command) = convert_action_to_sway_command(action) {
            let sway_key = convert_binding_to_sway_key(binding);
            let bind_command = format!("bindsym {} {}", sway_key, sway_command);
            sway_bindings.push(bind_command);
        }
    }
    
    // Generate the config file content
    let config_content = format!(
        "# Generated by COSMIC Settings - Keyboard Shortcuts\n\
         # This file contains all configured keyboard shortcuts\n\
         # Auto-generated on shortcuts change\n\n{}\n",
        sway_bindings.join("\n")
    );
    
    // Apply each binding
    for binding_cmd in &sway_bindings {
        match connection.run_command(binding_cmd.clone()) {
            Ok(_) => {
                info!("Applied keyboard shortcut: {}", binding_cmd);
            }
            Err(e) => {
                tracing::warn!("Failed to apply shortcut '{}': {}", binding_cmd, e);
                // Continue with other bindings instead of failing completely
            }
        }
    }
    
    // Save the config file for persistence
    if let Err(e) = save_config("50-keyboard-shortcuts", &config_content) {
        tracing::error!("Failed to save shortcuts config: {}", e);
    } else {
        info!("Updated {} keyboard shortcuts in Sway config", sway_bindings.len());
    }
    
    Ok(())
}

fn convert_binding_to_sway_key(binding: &Binding) -> String {
    let mut parts = Vec::new();
    
    // Add modifiers in consistent order
    if binding.modifiers.ctrl {
        parts.push("Ctrl");
    }
    if binding.modifiers.alt {
        parts.push("Alt");
    }
    if binding.modifiers.shift {
        parts.push("Shift");
    }
    if binding.modifiers.logo {
        parts.push("Mod4"); // Super/Logo key
    }
    
    // Add the main key
    if let Some(key) = &binding.key {
        parts.push(&convert_key_to_sway(key));
    }
    
    parts.join("+")
}

fn convert_key_to_sway(key: &cosmic_settings_config::shortcuts::Key) -> String {
    use cosmic_settings_config::shortcuts::Key;
    
    match key {
        Key::Character(c) => {
            // Handle special character mappings
            match c.as_str() {
                " " => "space".to_string(),
                "\t" => "Tab".to_string(),
                "\n" => "Return".to_string(),
                _ => c.to_string(),
            }
        }
        Key::Escape => "Escape".to_string(),
        Key::Tab => "Tab".to_string(),
        Key::Space => "space".to_string(),
        Key::Enter => "Return".to_string(),
        Key::F1 => "F1".to_string(),
        Key::F2 => "F2".to_string(),
        Key::F3 => "F3".to_string(),
        Key::F4 => "F4".to_string(),
        Key::F5 => "F5".to_string(),
        Key::F6 => "F6".to_string(),
        Key::F7 => "F7".to_string(),
        Key::F8 => "F8".to_string(),
        Key::F9 => "F9".to_string(),
        Key::F10 => "F10".to_string(),
        Key::F11 => "F11".to_string(),
        Key::F12 => "F12".to_string(),
        Key::ArrowUp => "Up".to_string(),
        Key::ArrowDown => "Down".to_string(),
        Key::ArrowLeft => "Left".to_string(),
        Key::ArrowRight => "Right".to_string(),
        Key::Home => "Home".to_string(),
        Key::End => "End".to_string(),
        Key::PageUp => "Page_Up".to_string(),
        Key::PageDown => "Page_Down".to_string(),
        Key::Insert => "Insert".to_string(),
        Key::Delete => "Delete".to_string(),
        Key::Backspace => "BackSpace".to_string(),
        Key::Print => "Print".to_string(),
        Key::Pause => "Pause".to_string(),
        Key::Menu => "Menu".to_string(),
        Key::NumLock => "Num_Lock".to_string(),
        Key::ScrollLock => "Scroll_Lock".to_string(),
        Key::CapsLock => "Caps_Lock".to_string(),
        _ => {
            // Fallback for unhandled keys
            tracing::warn!("Unhandled key type: {:?}", key);
            format!("{:?}", key)
        }
    }
}

fn convert_action_to_sway_command(action: &Action) -> Option<String> {
    match action {
        Action::System(system_action) => convert_system_action(system_action),
        Action::Focus(focus_action) => convert_focus_action(focus_action),
        Action::Move(move_action) => convert_move_action(move_action),
        Action::Resizing(resize_action) => convert_resize_action(resize_action),
        Action::Workspace(workspace_action) => convert_workspace_action(workspace_action),
        Action::Spawn(command) => Some(format!("exec {}", command)),
        Action::Disable => None, // Disabled shortcuts don't generate commands
        _ => {
            tracing::warn!("Unhandled action type: {:?}", action);
            None
        }
    }
}

fn convert_system_action(action: &cosmic_settings_config::shortcuts::action::System) -> Option<String> {
    use cosmic_settings_config::shortcuts::action::System;
    match action {
        System::Launcher => Some("exec cosmic-launcher".to_string()),
        System::WorkspaceOverview => Some("exec cosmic-workspaces".to_string()),
        System::AppLibrary => Some("exec cosmic-applications".to_string()),
        System::Lock => Some("exec cosmic-session lock".to_string()),
        System::LogOut => Some("exec cosmic-session logout".to_string()),
        System::Suspend => Some("exec systemctl suspend".to_string()),
        System::Hibernate => Some("exec systemctl hibernate".to_string()),
        System::Screenshot => Some("exec cosmic-screenshot".to_string()),
        System::ScreenshotWindow => Some("exec cosmic-screenshot --window".to_string()),
        System::ScreenshotArea => Some("exec cosmic-screenshot --area".to_string()),
        _ => {
            tracing::warn!("Unhandled system action: {:?}", action);
            None
        }
    }
}

fn convert_focus_action(action: &cosmic_settings_config::shortcuts::action::Focus) -> Option<String> {
    use cosmic_settings_config::shortcuts::action::{Focus, FocusDirection};
    match action {
        Focus::Direction(direction) => match direction {
            FocusDirection::Left => Some("focus left".to_string()),
            FocusDirection::Right => Some("focus right".to_string()),
            FocusDirection::Up => Some("focus up".to_string()),
            FocusDirection::Down => Some("focus down".to_string()),
        },
        Focus::Output(direction) => match direction {
            cosmic_settings_config::shortcuts::action::Direction::Left => Some("focus output left".to_string()),
            cosmic_settings_config::shortcuts::action::Direction::Right => Some("focus output right".to_string()),
            cosmic_settings_config::shortcuts::action::Direction::Up => Some("focus output up".to_string()),
            cosmic_settings_config::shortcuts::action::Direction::Down => Some("focus output down".to_string()),
        },
        _ => {
            tracing::warn!("Unhandled focus action: {:?}", action);
            None
        }
    }
}

fn convert_move_action(action: &cosmic_settings_config::shortcuts::action::Move) -> Option<String> {
    use cosmic_settings_config::shortcuts::action::{Move, Direction};
    
        Move::ToOutput(direction) => match direction {
            Direction::Left => Some("move container to output left".to_string()),
            Direction::Right => Some("move container to output right".to_string()),
            Direction::Up => Some("move container to output up".to_string()),
            Direction::Down => Some("move container to output down".to_string()),
        },
        Move::ToWorkspace(workspace_num) => Some(format!("move container to workspace number {}", workspace_num)),
        _ => {
            tracing::warn!("Unhandled move action: {:?}", action);
            None
        }
    }
}

fn convert_resize_action(action: &cosmic_settings_config::shortcuts::action::Resizing) -> Option<String> {
    use cosmic_settings_config::shortcuts::action::{Resizing, ResizeDirection};
    match action {
        Resizing::Direction(direction) => match direction {
            ResizeDirection::Inwards => Some("resize shrink width 10 px or 10 ppt; resize shrink height 10 px or 10 ppt".to_string()),
            ResizeDirection::Outwards => Some("resize grow width 10 px or 10 ppt; resize grow height 10 px or 10 ppt".to_string()),
        },
        _ => {
            tracing::warn!("Unhandled resize action: {:?}", action);
            None
        }
    }
}

fn convert_workspace_action(action: &cosmic_settings_config::shortcuts::action::Workspace) -> Option<String> {
    use cosmic_settings_config::shortcuts::action::Workspace;
    match action {
        Workspace::Switch(workspace_num) => Some(format!("workspace number {}", workspace_num)),
        Workspace::SwitchLast => Some("workspace back_and_forth".to_string()),
        _ => {
            tracing::warn!("Unhandled workspace action: {:?}", action);
            None
        }
    }
}
