use swayipc::{ Connection as SwayConnection};
use std::error::Error;
use cosmic_comp_config::input::{ ClickMethod, ScrollMethod};
use tracing::info;
pub type SwayResult<T = ()> = Result<T, Box<dyn Error>>;
use crate::sway::save_config;

// Import the macro from the main sway module
use crate::execute_sway_cmd;

use super::Page;

pub trait PointerMethods {
    /// Get a mutable reference to the sway connection
    fn sway_connection(&mut self) -> &mut SwayConnection;
}

impl PointerMethods for Page {
    fn sway_connection(&mut self) -> &mut SwayConnection {
        &mut self.connection
    }
}

use super::Message;

pub fn execute_sway_pointer_commands(message: &Message, page: &mut Page) -> SwayResult {
    match message {
        Message::DisableWhileTyping(disabled, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let decision = if *disabled { "disabled" } else { "enabled" };
            let cmd = format!("input type:{} dwt {}", device_type, decision);
            let config_file = if *touchpad { "20-touchpad-dwt" } else { "21-pointer-dwt" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Disable While Typing\n\
                 input type:{} {{\n\
                 \tdwt {}\n\
                 }}\n",
                device_type, decision
            );
            execute_sway_cmd!(page, cmd, format!("Set disable-while-typing to {} for {}", decision, device_type), config_file, &config_content);
        }

        Message::PrimaryButtonSelected(entity, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let select_model = if *touchpad {
                &mut page.touchpad_primary_button
            } else {
                &mut page.primary_button
            };
            select_model.activate(*entity);
            let Some(left_entity) = select_model.entity_at(1) else {
                return Err("Could not get left entity".into());
            };
            let left_handedness = if select_model.active() == left_entity { "enabled" } else { "disabled" };
            let cmd = format!("input type:{} left_handed {}", device_type, left_handedness);
            let config_file = if *touchpad { "20-touchpad-handedness" } else { "21-pointer-handedness" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Primary Button\n\
                 input type:{} {{\n\
                 \tleft_handed {}\n\
                 }}\n",
                device_type, left_handedness
            );
            execute_sway_cmd!(page, cmd, format!("Set left-handed mode to {} for {}", left_handedness, device_type), config_file, &config_content);
        }

        Message::SetAcceleration(enabled, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let profile = if *enabled { "adaptive" } else { "flat" };
            let cmd = format!("input type:{} accel_profile {}", device_type, profile);
            let config_file = if *touchpad { "20-touchpad-acceleration" } else { "21-pointer-acceleration" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Acceleration Profile\n\
                 input type:{} {{\n\
                 \taccel_profile {}\n\
                 }}\n",
                device_type, profile
            );
            execute_sway_cmd!(page, cmd, format!("Set acceleration profile to {} for {}", profile, device_type), config_file, &config_content);
        }

        Message::SetMouseSpeed(speed, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let cmd = format!("input type:{} pointer_accel {}", device_type, speed);
            let config_file = if *touchpad { "20-touchpad-speed" } else { "21-pointer-speed" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Pointer Speed\n\
                 input type:{} {{\n\
                 \tpointer_accel {}\n\
                 }}\n",
                device_type, speed
            );
            execute_sway_cmd!(page, cmd, format!("Set pointer acceleration to {} for {}", speed, device_type), config_file, &config_content);
        }

        Message::SetNaturalScroll(enabled, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let setting = if *enabled { "enabled" } else { "disabled" };
            let cmd = format!("input type:{} natural_scroll {}", device_type, setting);
            let config_file = if *touchpad { "20-touchpad-natural-scroll" } else { "21-pointer-natural-scroll" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Natural Scroll\n\
                 input type:{} {{\n\
                 \tnatural_scroll {}\n\
                 }}\n",
                device_type, setting
            );
            execute_sway_cmd!(page, cmd, format!("Set natural scroll to {} for {}", setting, device_type), config_file, &config_content);
        }

        Message::SetSecondaryClickBehavior(method, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let click_method = match method {
                Some(ClickMethod::ButtonAreas) => "button_areas",
                Some(ClickMethod::Clickfinger) => "clickfinger",
                _ => "none",
            };
            let cmd = format!("input type:{} click_method {}", device_type, click_method);
            let config_file = if *touchpad { "20-touchpad-click-method" } else { "21-pointer-click-method" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Click Method\n\
                 input type:{} {{\n\
                 \tclick_method {}\n\
                 }}\n",
                device_type, click_method
            );
            execute_sway_cmd!(page, cmd, format!("Set click method to {} for {}", click_method, device_type), config_file, &config_content);
        }

        Message::SetScrollFactor(factor, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let cmd = format!("input type:{} scroll_factor {}", device_type, factor);
            let config_file = if *touchpad { "20-touchpad-scroll-factor" } else { "21-pointer-scroll-factor" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Scroll Factor\n\
                 input type:{} {{\n\
                 \tscroll_factor {}\n\
                 }}\n",
                device_type, factor
            );
            execute_sway_cmd!(page, cmd, format!("Set scroll factor to {} for {}", factor, device_type), config_file, &config_content);
        }

        Message::SetScrollMethod(method, touchpad) => {
            let device_type = if *touchpad { "touchpad" } else { "pointer" };
            let scroll_method = match method {
                Some(ScrollMethod::TwoFinger) => "two_finger",
                Some(ScrollMethod::Edge) => "edge",
                Some(ScrollMethod::OnButtonDown) => "on_button_down",
                Some(ScrollMethod::NoScroll) => "none",
                _ => "none",
            };
            let cmd = format!("input type:{} scroll_method {}", device_type, scroll_method);
            let config_file = if *touchpad { "20-touchpad-scroll-method" } else { "21-pointer-scroll-method" };
            let config_content = format!(
                "# Generated by COSMIC Settings - Scroll Method\n\
                 input type:{} {{\n\
                 \tscroll_method {}\n\
                 }}\n",
                device_type, scroll_method
            );
            execute_sway_cmd!(page, cmd, format!("Set scroll method to {} for {}", scroll_method, device_type), config_file, &config_content);
        }

        Message::TapToClick(enabled) => {
            let setting = if *enabled { "enabled" } else { "disabled" };
            let cmd = format!("input type:touchpad tap {}", setting);
            let config_content = format!(
                "# Generated by COSMIC Settings - Tap to Click\n\
                 input type:touchpad {{\n\
                 \ttap {}\n\
                 }}\n",
                setting
            );
            execute_sway_cmd!(page, cmd, format!("Set tap-to-click to {} for touchpad", setting), "20-touchpad-tap", &config_content);
        }
    }
    Ok(())
}
